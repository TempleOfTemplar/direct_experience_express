# Generated by Django 3.0.5 on 2020-04-19 19:40

import blog.routes
import colorful.fields
import datetime
from django.db import migrations, models
import django.db.models.deletion
import django.db.models.manager
import modelcluster.contrib.taggit
import modelcluster.fields
import wagtail.core.fields


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('wagtailcore', '0045_assign_unlock_grouppagepermission'),
        ('wagtailimages', '0001_squashed_0021'),
        ('taggit', '0003_taggeditem_add_unique_index'),
    ]

    operations = [
        migrations.CreateModel(
            name='Category',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=80, unique=True, verbose_name='Название категории')),
                ('slug', models.SlugField(max_length=80, unique=True)),
                ('description', models.CharField(blank=True, max_length=500, verbose_name='Описание')),
                ('parent', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='children', to='blog.Category', verbose_name='Родительская категория category')),
            ],
            options={
                'verbose_name': 'Категория',
                'verbose_name_plural': 'Категории',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='CategoryEntryPage',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('category', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='+', to='blog.Category', verbose_name='Категория')),
            ],
        ),
        migrations.CreateModel(
            name='EntryPage',
            fields=[
                ('page_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='wagtailcore.Page')),
                ('body', wagtail.core.fields.RichTextField(verbose_name='тело')),
                ('date', models.DateTimeField(default=datetime.datetime.today, verbose_name='Дата добавления')),
                ('excerpt', wagtail.core.fields.RichTextField(blank=True, help_text='Резюме отображается в списке статей. Если это поле не заполнено, будет использован отрывок из текста статьи.', verbose_name='резюме')),
                ('num_comments', models.IntegerField(default=0, editable=False)),
                ('categories', models.ManyToManyField(blank=True, through='blog.CategoryEntryPage', to='blog.Category')),
                ('header_image', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='wagtailimages.Image', verbose_name='Изображение в шапке')),
            ],
            options={
                'verbose_name': 'Статья',
                'verbose_name_plural': 'Статьи',
            },
            bases=('wagtailcore.page', models.Model),
        ),
        migrations.CreateModel(
            name='HomePage',
            fields=[
                ('page_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='wagtailcore.Page')),
            ],
            options={
                'abstract': False,
            },
            bases=('wagtailcore.page',),
        ),
        migrations.CreateModel(
            name='Tag',
            fields=[
            ],
            options={
                'proxy': True,
                'indexes': [],
                'constraints': [],
            },
            bases=('taggit.tag',),
        ),
        migrations.CreateModel(
            name='TagEntryPage',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('content_object', modelcluster.fields.ParentalKey(on_delete=django.db.models.deletion.CASCADE, related_name='entry_tags', to='blog.EntryPage')),
                ('tag', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='blog_tagentrypage_items', to='taggit.Tag')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='EntryPageRelated',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('entrypage_from', modelcluster.fields.ParentalKey(on_delete=django.db.models.deletion.CASCADE, related_name='related_entrypage_from', to='blog.EntryPage', verbose_name='Статья')),
                ('entrypage_to', modelcluster.fields.ParentalKey(on_delete=django.db.models.deletion.CASCADE, related_name='related_entrypage_to', to='blog.EntryPage', verbose_name='Статья')),
            ],
        ),
        migrations.AddField(
            model_name='entrypage',
            name='tags',
            field=modelcluster.contrib.taggit.ClusterTaggableManager(blank=True, help_text='A comma-separated list of tags.', through='blog.TagEntryPage', to='taggit.Tag', verbose_name='Tags'),
        ),
        migrations.AddField(
            model_name='categoryentrypage',
            name='page',
            field=modelcluster.fields.ParentalKey(on_delete=django.db.models.deletion.CASCADE, related_name='entry_categories', to='blog.EntryPage'),
        ),
        migrations.CreateModel(
            name='BlogPage',
            fields=[
                ('page_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='wagtailcore.Page')),
                ('description', models.CharField(blank=True, help_text='Описание появится под заголовком.', max_length=255, verbose_name='Описание')),
                ('main_color', colorful.fields.RGBColorField(default='#4D6AE0', verbose_name='Основной цвет')),
                ('display_comments', models.BooleanField(default=False, verbose_name='Отображать комментарии')),
                ('display_categories', models.BooleanField(default=True, verbose_name='Отображать категории')),
                ('display_tags', models.BooleanField(default=True, verbose_name='Отображать теги')),
                ('display_popular_entries', models.BooleanField(default=True, verbose_name='Отображать популярные статьи')),
                ('display_last_entries', models.BooleanField(default=True, verbose_name='Отображать новые статьи')),
                ('display_archive', models.BooleanField(default=True, verbose_name='Отображать архив')),
                ('disqus_api_secret', models.TextField(blank=True)),
                ('disqus_shortname', models.CharField(blank=True, max_length=128)),
                ('num_entries_page', models.IntegerField(default=5, verbose_name='Статей на странице')),
                ('num_last_entries', models.IntegerField(default=3, verbose_name='Новых статей на странице')),
                ('num_popular_entries', models.IntegerField(default=3, verbose_name='Популярных статей на странице')),
                ('num_tags_entry_header', models.IntegerField(default=5, verbose_name='Максимум тегов в заголовке')),
                ('short_feed_description', models.BooleanField(default=True, verbose_name='Используйте короткое описание в лентах')),
                ('header_image', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='wagtailimages.Image', verbose_name='Изображение в шапке')),
            ],
            options={
                'verbose_name': 'Блог',
                'verbose_name_plural': 'Блоги',
            },
            bases=(blog.routes.BlogRoutes, 'wagtailcore.page', models.Model),
            managers=[
                ('extra', django.db.models.manager.Manager()),
            ],
        ),
    ]
